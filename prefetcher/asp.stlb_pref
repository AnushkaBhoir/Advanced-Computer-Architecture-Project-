#include "cache.h"

// ------------------------- DO NOT CHANGE -------------------------------- //
#define IP_TRACKER_COUNT 64           // Number of IP trackers
// ------------------------- DO NOT CHANGE -------------------------------- //

#define PREFETCH_DEGREE 5             // Prefetch degree - you need to vary this!

class IP_TRACKER {
  public:
    // ------------------------- Define the IP_TRACKER class here ------------------------- //
    uint64_t ip = 0;
    uint64_t last_addr =0 ;
    uint64_t stride = 0;
    int state = 0;
    int rrpv = 0;

};

IP_TRACKER trackers[IP_TRACKER_COUNT];

// ------------------------- Initialize the prefetcher ------------------------- // 
void CACHE::stlb_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " STLB arbitrary stride prefetcher" << endl;


}

// --------------- This is the main prefetcher operate function ---------------- // 
void CACHE::stlb_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint64_t prefetch_id, uint8_t instruction)
{
    // ------------------------ Add Arbitrary Stride pf_address logic here ----------------------- // 
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    IP_TRACKER* t;
    uint64_t pf_address;
    bool found = false;
    for(int i=0;i<IP_TRACKER_COUNT;i++){
        if(trackers[i].ip == ip){
            found = true;
            t = &trackers[i];
            uint64_t diff = cl_addr - t->last_addr;
            if(diff == t->stride){
                if(t->state < 2){
                    t->state++;
                }
                t->rrpv = 0;
                if(t->state >= 1){
                    for(int j=1;j<=PREFETCH_DEGREE; j++){
                        pf_address = (cl_addr + (j * t->stride));
                        pf_address = pf_address << LOG2_BLOCK_SIZE;
                        prefetch_translation(ip, pf_address, (int)2, 0, prefetch_id, instruction);
                    }
                }
            } else{
                t->stride = diff;
                t->state = 0;
                t->rrpv = 2; // Assign initial RRPV
            }
            t->last_addr = cl_addr;
            break;
        } 
    }
    if(!found){
        bool check = false;
        for(int i=0;i<IP_TRACKER_COUNT;i++){
            if(trackers[i].ip == 0){
                trackers[i].last_addr = cl_addr;
                trackers[i].ip = ip;
                trackers[i].stride = 0;
                trackers[i].state = 0;
                trackers[i].rrpv = 2;
                check = true;
                break;
            }
        }
        if(!check){
            int idx = -1;
            for (int i = 0; i < IP_TRACKER_COUNT; i++) {
                if (trackers[i].rrpv == 3) {
                    idx = i;
                    break;
                }
            }
            if (idx == -1) {
                for (int i = 0; i < IP_TRACKER_COUNT; i++) {
                    trackers[i].rrpv++;
                    if (trackers[i].rrpv == 3) {
                        idx = i;
                    }
                }
            }
            trackers[idx].ip = ip;
            trackers[idx].last_addr = cl_addr;
            trackers[idx].stride = 0;
            trackers[idx].state = 0;
            trackers[idx].rrpv = 2;
        }
    }
  
    return;
}

// ------------------------- DO NOT CHANGE -------------------------------- //
void CACHE::stlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
    return;
}

void CACHE::stlb_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " STLB arbitrary stride prefetcher final stats" << endl;
	cout << "Degree: " << PREFETCH_DEGREE << endl;
}
// ------------------------- DO NOT CHANGE -------------------------------- //